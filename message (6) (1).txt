getgenv().Index = {
    ['Start'] = {
        ['IntroBlur'] = {['Active'] = true};
        ['Silent'] = {
            ['Active'] = true;
            ['TargetParts'] = 'Head';
            ['Air'] = 'Head';
            ['Prediction'] = 0;
        };
        ['TriggerBot'] = {
            ['Notification'] = true;
            ['Delay'] = 0.0001;
            ['Blacklisted'] = {"[Knife]"};
            ['Keybind'] = 'T';
        };
        ['SilentOffsets'] = {['Jump'] = -1.50; ['Fall'] = 0};
        ['AimbotOffsets'] = {['Active'] = true; ['Jump'] = -1.50; ['Fall'] = 0};
        ['AimBot'] = {
            ['Notification'] = true;
            ['Keybind'] = 'X';
            ['Active'] = true;
            ['Predictions'] = 0;
            ['Smoothness'] = 0.025;
            ['TargetParts'] = 'Head';
            ['Air'] = {
                ['Active'] = false;
                ['Smoothness'] = 0.025;
                ['Prediction'] = 0;
                ['Parts'] = 'Head';
            };
        };
        ['Misc'] = {
            ['Resolver'] = {
                ['Keybind'] = 'G';
                ['Active'] = false;
                ['Notifications'] = false;
                ['Adjust'] = 0.2;
            };
            ['Adjustment'] = {
                ['VelocityThresold'] = 100;
            };
            ['Macro'] = {
                ['Keybind'] = 'Q';
                ['Active'] = true;
                ['Acceleration'] = 0.0;
                ['Variety'] = 'Third'; --// First
            };
            ['Spin'] = {
                ['Keybind'] = 'Z',
                ['Degrees'] = 360;
                ['Acceleration'] = 4000;
                ['Directions'] = 'North'; --// Any Directions
                ['Smoothness'] = 1;
            };
        };
    };
}
for key, object in pairs(getgc(true)) do
    if type(object) == "table" then
        setreadonly(object, false)
        local indexInstance = rawget(object, "indexInstance")

        if type(indexInstance) == "table" and indexInstance[1] == "kick" then
            setreadonly(indexInstance, false)
            rawset(object, "Table", {"kick", function() coroutine.yield() end})
            break
        end
    end
end

local logService = game:GetService("LogService")
local replicatedStorage = game:GetService("ReplicatedStorage")

for _, connection in ipairs(getconnections(logService.MessageOut)) do
    connection:Disable()
end

local openACFolders = {
    replicatedStorage:FindFirstChild("OpenAC ReplicatedStorage Folder"),
    game:FindFirstChild("OpenAC Replicated Folder")
}

for _, folder in ipairs(openACFolders) do
    if folder then
        folder:Destroy()
    end
end

task.wait(3)
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Jairo = Players.LocalPlayer

local function Args()
    if string.find(identifyexecutor(), 'Solara') then
        local i = game.PlaceId
        local Argument
        if i == 2788229376 or i == 7213786345 or i == 16033173781 then
            Argument = "UpdateMousePosI2"
        elseif i == 9825515356 then
            Argument = "MousePosUpdate"
        else
            Argument = "UpdateMousePos"
        end
        return Argument
    end
end

local Script = {
    Table = getgenv().Index,
    Target = nil,
    MainEvent = nil,
    Argument = Args(),
    Functions = {},
    Connections = {},
}

local function getVelocity(Player)
    if string.find(identifyexecutor(), 'Solara') then
        local targetParts = getgenv().Index.Start.Silent.TargetParts
        local Old = Player.Character:FindFirstChild(targetParts)
        if Old then
            wait(0.1)
            local Current = Player.Character.HumanoidRootPart.Position
            return (Current - Old.Position) / 0.1
        end
        return Vector3.zero
    end
end

local v = nil
RunService.Heartbeat:Connect(function(deltaTime)
    if Script.Target and Script.Target.Character and Script.Target.Character:FindFirstChild("HumanoidRootPart") then
        v = getVelocity(Script.Target)
    end
end)

task.spawn(function()
    if string.find(identifyexecutor(), "Solara") then
        for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
            if remote.Name == "MainEvent" then
                Script.MainEvent = remote
                break
            end
        end
    end
end)

Script.Functions.GetClosest = function()
    local Target
    local Closest = math.huge
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= Jairo and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            local PartPos, OnScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)
            local Magnitude = (Vector2.new(PartPos.X, PartPos.Y) - UserInputService:GetMouseLocation()).Magnitude
            if Magnitude < Closest and OnScreen then
                Target = Player
                Closest = Magnitude
            end
        end
    end
    return Target
end


    local hookmetamethod = hookmetamethod
    local originalHook

    local player = game.Players.LocalPlayer
    local Mouse = player:GetMouse()

originalHook = hookmetamethod(game, "__index", function(self, index)
        if not checkcaller() and self == Mouse and index == "Hit" then
            local silentSettings = getgenv().Index and getgenv().Index.Start.Silent
            if silentSettings and Script.Target and Script.Target.Character then
                local targetPart = Script.Target.Character:FindFirstChild(silentSettings.TargetParts)
                if targetPart then
                    local prediction = targetPart.Velocity * (silentSettings.Prediction or 1)
                    local offsets = getgenv().Index.Start.SilentOffsets
                    local position
    
                    if Script.Target.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                        position = targetPart.CFrame + Vector3.new(0, offsets.Jump, 0)
                    else
                        position = targetPart.CFrame + Vector3.new(0, offsets.Fall, 0)
                    end
    
                    local predictedPosition = position + prediction
            
                    if predictedPosition then
                        return predictedPosition
                    end
                end
            end
        end
    
        return originalHook(self, index)
    end)




Script.Connections.InputBeganConnection = UserInputService.InputBegan:Connect(function(Input, gameProcessedEvent)
    if gameProcessedEvent then return end

    local keybind = getgenv().Index.Start.AimBot.Keybind
    local aimBotActive = getgenv().Index.Start.AimBot.Active

    if Input.KeyCode == Enum.KeyCode[keybind] and aimBotActive then
        if Script.Target then
            Script.Target = nil
        else
            Script.Target = Script.Functions.GetClosest()
            if Script.Target then
                if getgenv().Index.Start.AimBot.Notification then
                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = "INDEX",
                        Text = "opps: " .. Script.Target.DisplayName,
                        Duration = 0.001,
                    })
                end
            end
        end
    end
end)




Script.Functions.isAirborne = function(player)
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    return humanoid and humanoid:GetState() == Enum.HumanoidStateType.Freefall
end


Script.Functions.rewrittenAimbot = function()
    if not Script.Target or not Script.Target.Character then return end

    local bodyEffects = Script.Target.Character:FindFirstChild("BodyEffects")
    if not bodyEffects then return end

    local KOd = bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
    local humanoid = Script.Target.Character:FindFirstChild("Humanoid")
    if humanoid and (humanoid.Health <= 1 or KOd) then
        Script.Target = nil
        return
    end

    local partName = tostring(getgenv().Index.Start.AimBot.TargetParts)
    local Parts = Script.Target.Character:FindFirstChild(partName)
    if not Parts then return end

    local Smooth = getgenv().Index.Start.AimBot.Smoothness
    local future = getgenv().Index.Start.AimBot.Predictions
    local AirSmoothness = getgenv().Index.Start.AimBot.Air.Smoothness
    local airpreds = getgenv().Index.Start.AimBot.Air.Prediction

    if getgenv().Index.Start.AimBot.Air.Active and Script.Functions.isAirborne(Script.Target) then
        future = airpreds
    end

    if Script.Functions.isAirborne(Script.Target) then
        Smooth = AirSmoothness
    end

    local runService = game:GetService("RunService")
    if getgenv().Index.Start.Misc.Resolver.Active and Parts then
        local lastPosition = Parts.Position
        task.wait()
        local currentPosition = Parts.Position
        local velocity = (currentPosition - lastPosition) / runService.RenderStepped:Wait()
        Parts.AssemblyLinearVelocity = velocity
        Parts.Velocity = velocity
    end

    local futurepos = Parts.Position + Parts.Velocity * future
    if getgenv().Index.Start.AimbotOffsets.Active and humanoid then
        local humanoidState = humanoid:GetState()
        if humanoidState == Enum.HumanoidStateType.Freefall then
            futurepos = futurepos + Vector3.new(0, getgenv().Index.Start.AimbotOffsets.Jump, 0)
        else
            futurepos = futurepos + Vector3.new(0, getgenv().Index.Start.AimBot.Fall, 0)
        end
    end

    local TargetCamera = CFrame.new(workspace.CurrentCamera.CFrame.Position, futurepos)
    workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(TargetCamera, Smooth)
end

RunService.RenderStepped:Connect(function()
    if Script.Target then
        Script.Functions.rewrittenAimbot()
    end
end)


local settings = getgenv().Index.Start
local isActive = false
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")

Script.Functions.handleMacro = function()
    local acceleration = settings.Misc.Macro.Acceleration
    if type(acceleration) ~= "number" then
        warn("Invalid Acceleration value")
        return
    end
    
    local speed = acceleration / 100000

    if settings.Misc.Macro.Variety == "Third" then
        repeat
            task.wait(speed)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.I, false, game)
            task.wait(speed)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.O, false, game)
            task.wait(speed)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.I, false, game)
            task.wait(speed)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.O, false, game)
        until not isActive
    elseif settings.Misc.Macro.Variety == "First" then
        repeat
            VirtualInputManager:SendMouseWheelEvent("0", "0", true, game)
            wait(speed)
            VirtualInputManager:SendMouseWheelEvent("0", "0", false, game)
            wait(speed)
            VirtualInputManager:SendMouseWheelEvent("0", "0", true, game)
            wait(speed)
            VirtualInputManager:SendMouseWheelEvent("0", "0", false, game)
            wait(speed)
        until not isActive
    end
end

Script.Functions.onInputBegan = function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode[settings.Misc.Macro.Keybind] then
        isActive = not isActive
        if isActive then
            Script.Functions.handleMacro()
        end
    end
end

UserInputService.InputBegan:Connect(Script.Functions.onInputBegan)


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local lp = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() and Players.LocalPlayer
local mouse = lp:GetMouse()

Script.Functions.isDead = function(player)
    local character = player.Character
    if not character or not character:FindFirstChild("BodyEffects") then
        return false
    end
    local bodyEffects = character.BodyEffects
    local ko = bodyEffects:FindFirstChild("K.O") or bodyEffects:FindFirstChild("KO")
    return ko and ko.Value or false
end

Script.Functions.getTarget = function(instance)
    if not instance then
        return false
    end

    for _, player in next, Players:GetPlayers() do
        if player.Character and (instance == player.Character or instance:IsDescendantOf(player.Character)) then
            if not Script.Functions.isDead(player) then
                return player
            end
        end
    end

    return false
end

Script.Functions.isToolBlacklisted = function(tool)
    for _, toolName in ipairs(Script.Table.Start.TriggerBot.Blacklisted) do
        if tool.Name == toolName then
            return true
        end
    end
    return false
end
Script.Functions.sendNotification = function(message)
    StarterGui:SetCore("SendNotification", {
        Title = "Notification",
        Text = message,
        Duration = 2
    })
end

local JAIROUGH = false
Script.Functions.onKeyPress = function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[Script.Table.Start.TriggerBot.Keybind] then
        JAIROUGH = not JAIROUGH
        if Script.Table.Start.TriggerBot.Notification then
            Script.Functions.sendNotification("TriggerBot " .. (JAIROUGH and "Enabled" or "Disabled"))
        end
    end
end

UserInputService.InputBegan:Connect(Script.Functions.onKeyPress)

Script.Functions.triggerBot = function()
    local con
    con = RunService.Heartbeat:Connect(function()
        if JAIROUGH then
            local target = mouse.Target

            if target and Script.Functions.getTarget(target) then
                if lp.Character then
                    local tool = lp.Character:FindFirstChildWhichIsA('Tool')
                    if tool and not Script.Functions.isToolBlacklisted(tool) then
                        if tool then
                            task.wait(Script.Table.Start.TriggerBot.Delay)
                            tool:Activate()
                        end
                    end
                end
            end
        end
    end)

    Script.Connections.triggerBot = con
end



Script.Functions.triggerBot()

getgenv().disable = function()
    getgenv().disable = nil
    warn("Disconnecting:", Script.Connections.triggerBot)
    Script.Connections.triggerBot:Disconnect()
end


local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local click = false
local rotate = 0
local render = 0

Script.Functions.onKeyPress = function(Input, GameProcessedEvent)
    if Input.KeyCode == Enum.KeyCode[getgenv().Index.Start.Misc.Spin.Keybind] and not GameProcessedEvent then
        click = not click
    end
end

Script.Functions.getDirectionVector = function(direction)
    if direction == "North" then
        return Vector3.new(0, 1, 0)
    elseif direction == "South" then
        return Vector3.new(0, -1, 0)
    elseif direction == "East" then
        return Vector3.new(1, 0, 0)
    elseif direction == "West" then
        return Vector3.new(-1, 0, 0)
    else
        return Vector3.new(0, 1, 0)
    end
end

Script.Functions.rotateCamera = function()
    if click then
        local currentTime = tick()
        local timeDelta = math.min(currentTime - render, 0.01)
        render = currentTime

        local rotationSpeed = getgenv().Index.Start.Misc.Spin.Acceleration * timeDelta
        local smoothRotation = rotationSpeed * getgenv().Index.Start.Misc.Spin.Smoothness

        local directionVector = Script.Functions.getDirectionVector(getgenv().Index.Start.Misc.Spin.Directions)
        local rotation = CFrame.fromAxisAngle(directionVector, math.rad(smoothRotation))
        Camera.CFrame = Camera.CFrame * rotation

        rotate = rotate + rotationSpeed
        if rotate >= getgenv().Index.Start.Misc.Spin.Degrees then
            click = false
            rotate = 0
        end
    end
end

UserInputService.InputBegan:Connect(Script.Functions.onKeyPress)
RunService.RenderStepped:Connect(Script.Functions.rotateCamera)


UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode[getgenv().Index.Start.Misc.Resolver.Keybind] then
        local resolver = getgenv().Index.Start.Misc.Resolver
        if resolver.Active then
            resolver.Active = false
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Resolver OFF",
                Text = "igettoomanyhuzz",
                Duration = 2,
            })
        else
            resolver.Active = true
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Resolver ON",
                Text = "igettoomanyhuzz",
                Duration = 2,
            })
        end
    end
end)










if Script.Table.Start.IntroBlur.Active then
    Script.Functions.PlayThatBitch = function()
        local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")

        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "IntroScreen"
        screenGui.Parent = playerGui

        local frame = Instance.new("Frame")
        frame.Name = "IntroFrame"
        frame.Parent = screenGui
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundTransparency = 1

        local imageLabel = Instance.new("ImageLabel")
        imageLabel.Name = "IntroImage"
        imageLabel.Parent = frame
        imageLabel.Size = UDim2.new(0.01, 0, 0.01, 0)  
        imageLabel.Position = UDim2.new(0.5, -0.1, 0.5, -0.1) 
        imageLabel.Image = "rbxassetid://92754733133044"
        imageLabel.BackgroundTransparency = 1
        imageLabel.ImageTransparency = 100
        imageLabel.AnchorPoint = Vector2.new(0.5, 0.5)

        local sound = Instance.new("Sound")
        sound.Name = "IntroSound"
        sound.Parent = frame
        sound.SoundId = "rbxassetid://8940801080"
        sound.Volume = 50
        sound:Play()

        local tweenService = game:GetService("TweenService")

        local blurEffect = Instance.new("BlurEffect")
        blurEffect.Parent = game.Lighting
        blurEffect.Size = 60

        local zoomTweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)  
        local blurTweenInfo = TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)  

        local fadeIn = tweenService:Create(imageLabel, zoomTweenInfo, {ImageTransparency = 0.5})
        local fadeOut = tweenService:Create(imageLabel, zoomTweenInfo, {ImageTransparency = 1})
        local blurTween = tweenService:Create(blurEffect, blurTweenInfo, {Size = 0})  
        local zoomTween = tweenService:Create(imageLabel, zoomTweenInfo, {Size = UDim2.new(0.35, 0, 0.35, 0)})

        fadeIn:Play()
        fadeIn.Completed:Wait()

        zoomTween:Play()
        blurTween:Play()

        wait(3)  

        fadeOut:Play()
        fadeOut.Completed:Wait()

        blurTween:Play()
        blurTween.Completed:Wait()

        blurEffect:Destroy()
        screenGui:Destroy()
    end

    Script.Functions.PlayThatBitch()
end
